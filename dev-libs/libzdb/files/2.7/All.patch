diff -r c79ef3524c68 Makefile.am
--- a/Makefile.am	Wed Oct 06 17:21:12 2010 +0300
+++ b/Makefile.am	Wed Oct 06 18:38:09 2010 +0300
@@ -1,7 +1,7 @@
 # Copyright (C) 2010 Tildeslash Ltd. All rights reserved.
 
 AUTOMAKE_OPTIONS = foreign no-dependencies
-ACLOCAL_AMFLAGS  = -I m4
+ACLOCAL_AMFLAGS  = -I config
 
 SUBDIRS         = . $(UNIT_TEST)
 DIST_SUBDIRS    = . test
diff -r c79ef3524c68 configure.ac
--- a/configure.ac	Wed Oct 06 17:21:12 2010 +0300
+++ b/configure.ac	Wed Oct 06 18:38:09 2010 +0300
@@ -4,7 +4,7 @@
 
 AC_INIT([libzdb], [2.7], [bugs-libzdb@tildeslash.com])
 AC_CONFIG_AUX_DIR(config)
-AC_CONFIG_MACRO_DIR([m4])
+AC_CONFIG_MACRO_DIR([config])
 AM_INIT_AUTOMAKE
 AC_CONFIG_SRCDIR([src/Config.h])
 AC_CONFIG_COMMANDS([libtool_patch],[test `uname` = "OpenBSD" && perl -p -i -e "s/deplibs_check_method=.*/deplibs_check_method=pass_all/g" libtool])
@@ -14,6 +14,7 @@
 # Programs 
 # ---------------------------------------------------------------------------
 
+PKG_PROG_PKG_CONFIG
 AC_PROG_CC
 AC_PROG_GCC_TRADITIONAL
 AC_PATH_PROG([RE2C], [re2c], [re2c_not_found], [$PATH:/usr/local/bin:/usr/bin])
@@ -109,6 +110,10 @@
     ]
 )
 
+
+
+openssl="false"
+
 AC_ARG_ENABLE([openssl],
         AS_HELP_STRING([--enable-openssl(=<path>)], 
                 [Link libzdb with openssl. If database libraries were linked static,
@@ -117,21 +122,19 @@
                 be given to specify the top-level directory to search for openssl to
                 link with]),
      [
-        openssl="true"
-        if test "x$enableval" = "xyes"; then
+	AS_IF([test "x$enable_openssl" != "xno"], [
+	PKG_CHECK_MODULES([openssl], [openssl >= 0.9])
 		AC_CHECK_LIB([ssl], [SSL_library_init], [], [AC_MSG_ERROR([libssl not found])])
 		AC_CHECK_LIB([crypto], [SHA1_Init], [], [AC_MSG_ERROR([libcrypto not found])])
-	else
-                AC_MSG_CHECKING([for openssl in $enableval])
-                LDFLAGS="-L$enableval/lib -lssl -lcrypto $LDFLAGS "
-                CPPFLAGS="-I$enableval/include $CPPFLAGS"
-                if test -r "$enableval/lib/libssl.a" -a -r "$enableval/lib/libcrypto.a"; then
-                        AC_MSG_RESULT([ok])
-                else
-                       AC_MSG_ERROR([openssl not found in $enableval])
-                fi
-        fi
-     ],[openssl="false"])
+
+	],[openssl="false"])
+
+		LDFLAGS="$LDFLAGS `$PKG_CONFIG --libs-only-l  openssl`"
+		openssl="true"
+	],
+
+	 [openssl="false"])
+	
 
 AC_ARG_ENABLE(sqliteunlock,
 	AS_HELP_STRING([--enable-sqliteunlock], 
@@ -172,35 +175,25 @@
 
 # Database Libraries 
 
-mysql="yes"
+mysql="no"
 AC_MSG_CHECKING(for mysql)
 AC_ARG_WITH([mysql], 
         AS_HELP_STRING([--with-mysql(=<path>)], 
                 [path is optional and if given should specify the full path to the MySQL
                  configure script, mysql_config. E.g. --with-mysql=/<path>/mysql_config]), 
         [
-                if test "xno" = "x$with_mysql"; then
-                        AC_MSG_RESULT([no])
-                        mysql="no"
-                else
-                        AC_MSG_RESULT([yes])
-                        AC_CHECK_FILE([$with_mysql], 
-                        [
-                                MYSQLCONFIG=$with_mysql
-                        ], 
-                        [
-                                AC_MSG_WARN([mysql_config given as $with_mysql not found])
-                                mysql="no"
-                        ])        
-                fi
-        ],
+                  if test "xyes" = "x$with_mysql"; then
+
+			AC_MSG_RESULT([yes])
+        AC_PATH_PROG([MYSQLCONFIG], [mysql_config], [no], [$PATH:/usr/local/bin:/usr/local/mysql/bin:/usr/bin])
+	if test "x$MYSQLCONFIG" = "xno"; then
+	AC_MSG_WARN([mysql_config is required to build libzdb with mysql])
+	mysql="no"
+	fi
+	fi
+
+	],
         [
-                AC_MSG_RESULT([yes])
-                AC_PATH_PROG([MYSQLCONFIG], [mysql_config], [no], [$PATH:/usr/local/bin:/usr/local/mysql/bin])
-                if test "x$MYSQLCONFIG" = "xno"; then
-                        AC_MSG_WARN([mysql_config is required to build libzdb with mysql])
-                        mysql="no"
-                fi
         ])
 if test "xyes" = "x$mysql"; then
         svd_CPPFLAGS=$CPPFLAGS
@@ -283,30 +276,28 @@
 fi
 AM_CONDITIONAL([WITH_POSTGRESQL], test "xyes" = "x$postgresql")
 
-sqlite="yes"
+sqlite="no"
 AC_MSG_CHECKING(for SQLite3)
 AC_ARG_WITH([sqlite], 
         AS_HELP_STRING([--with-sqlite=<path>], 
                 [prefix of SQLite installation. e.g. /usr/local/sqlite3 or /usr]), 
         [
-        if test "xno" = "x$with_sqlite"; then
-                AC_MSG_RESULT([no])
-                sqlite="no"
-        else
-                AC_MSG_RESULT([yes])
-                svd_LDFLAGS=$LDFLAGS
+           if test "x$with_sqlite" != "xno"; then
+	    
+	 	PKG_CHECK_MODULES([sqlite3], [ sqlite3 ])	
+		svd_LDFLAGS=$LDFLAGS
                 svd_CPPFLAGS=$CPPFLAGS
                 LDFLAGS="-L$with_sqlite/lib $LDFLAGS"
                 CPPFLAGS="-I$with_sqlite/include $CPPFLAGS"
                 AC_CHECK_HEADERS([sqlite3.h], [
-                        sqlite="yes"
-                        if test -r "$with_sqlite/lib/libsqlite3.a"; then
-                                DBCPPFLAGS="$DBCPPFLAGS -I$with_sqlite/include"
-                                DBLDFLAGS="$DBLDFLAGS -L$with_sqlite/lib/ -lsqlite3"
-                        else
-                                sqlite="no"
-                        fi
-                ], [sqlite="no"])
+                	], 
+				[sqlite="no"])
+		sqlite="yes"
+		DBCPPFLAGS="$DBCPPFLAGS `$PKG_CONFIG --cflags-only-I sqlite3`"
+		DBLDFLAGS="$DBLDFLAGS `$PKG_CONFIG  --libs-only-l sqlite3`"
+		], 
+		[sqlite="no"])
+
                 LDFLAGS=$svd_LDFLAGS
                 CPPFLAGS=$svd_CPPFLAGS
         fi
@@ -320,7 +311,7 @@
 fi
 AM_CONDITIONAL([WITH_SQLITE], test "xyes" = "x$sqlite")
 
-oracle="yes"
+oracle="no"
 AC_MSG_CHECKING(for oracle)
 AX_LIB_ORACLE_OCI
 if test -n "$ORACLE_OCI_CFLAGS" -a -n "$ORACLE_OCI_LDFLAGS"; then
@@ -332,11 +323,6 @@
 fi
 AM_CONDITIONAL([WITH_ORACLE], test "xyes" = "x$oracle")
 
-# Test if any database system was found
-if test "xno" = "x$postgresql" -a "xno" = "x$mysql" -a "xno" = "x$sqlite" -a "xno" = "x$oracle"; then
-        AC_MSG_ERROR([No available database found or selected. Try configure --help])
-fi
-
 AC_SUBST(DBLDFLAGS)
 AC_SUBST(DBCPPFLAGS)
 
